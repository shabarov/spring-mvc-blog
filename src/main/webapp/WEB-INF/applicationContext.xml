<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:annotation-config/>

    <context:property-placeholder location="classpath:blog.properties" />

<!--    <bean id="propertySourcesPlaceholderConfigurer"-->
<!--          class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"/>-->

    <bean id="categoryDao" class="ru.shabarov.blog.dao.AbstractDaoImpl">
        <constructor-arg>
            <value>ru.shabarov.blog.entity.Category</value>
        </constructor-arg>
    </bean>

    <bean id="postDao" class="ru.shabarov.blog.dao.AbstractDaoImpl">
        <constructor-arg>
            <value>ru.shabarov.blog.entity.Post</value>
        </constructor-arg>
    </bean>

    <bean id="commentDao" class="ru.shabarov.blog.dao.AbstractDaoImpl">
        <constructor-arg>
            <value>ru.shabarov.blog.entity.Comment</value>
        </constructor-arg>
    </bean>

    <bean id="userDao" class="ru.shabarov.blog.dao.AbstractDaoImpl">
        <constructor-arg>
            <value>ru.shabarov.blog.entity.User</value>
        </constructor-arg>
    </bean>

    <bean id="postLikeDao" class="ru.shabarov.blog.dao.PostLikeDao">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="customBeanFactoryPostProcessor" class="ru.shabarov.blog.beanlifecycle.CustomBeanFactoryPostProcessor"/>
    <bean id="dummyUserFactoryBean" class="ru.shabarov.blog.beanlifecycle.DummyUserFactoryBean"/>

    <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
        <property name="customEditors">
            <map>
                <entry key="ru.shabarov.blog.entity.User">
                    <bean id="userEditor" class="ru.shabarov.blog.bind.UserEditor"/>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="userContacts" class="ru.shabarov.blog.entity.Contact">
        <property name="contact" value="Mike-mike@mail.com"/>
    </bean>

    <bean id="daoLoggingAspect" class="ru.shabarov.blog.aspect.DaoLoggingAspect"/>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="500000"/>
    </bean>

    <bean class="org.springframework.remoting.rmi.RmiServiceExporter">
        <property name="service" ref="postExportServiceImpl"/>
        <property name="serviceName" value="PostExportService"/>
        <property name="serviceInterface" value="ru.shabarov.blog.rmi.PostExportService"/>
        <!--<property name="registryPort" value="1199"/>-->
    </bean>

    <bean id="postExportServiceClient" class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
        <property name="serviceUrl" value="rmi://localhost/PostExportService"/>
        <property name="serviceInterface" value="ru.shabarov.blog.rmi.PostExportService"/>
    </bean>

    <bean class="org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter"/>

<!--    <bean id="mbeanExporter" class="org.springframework.jmx.export.MBeanExporter">-->
<!--        <property name="beans">-->
<!--            <map>-->
<!--                <entry key="blog:name=PostExportClient" value-ref="postExportClient"/>-->
<!--            </map>-->
<!--        </property>-->
<!--&lt;!&ndash;        <property name="server" ref="mbeanServer"/>&ndash;&gt;-->
<!--        <property name="assembler" ref="assembler"/>-->
<!--    </bean>-->

<!--    <bean id="assembler" class="org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler">-->
<!--        <property name="managedMethods" value="getMessage,setMessage"/>-->
<!--    </bean>-->

<!--    <bean id="assembler" class="org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler">-->
<!--        <property name="managedInterfaces" value="ru.shabarov.blog.rmi.PostExportClientManagedOperations"/>-->
<!--    </bean>-->

<!--    <context:mbean-server>-->
<!--    </context:mbean-server>-->

    <bean id="registry" class="org.springframework.remoting.rmi.RmiRegistryFactoryBean">
        <property name="port" value="1099"/>
    </bean>

    <bean id="serverConnector"
          class="org.springframework.jmx.support.ConnectorServerFactoryBean"
          depends-on="registry">
        <property name="objectName" value="connector:name=rmi"/>
        <property name="serviceUrl"
                  value="service:jmx:rmi://localhost/jndi/rmi://localhost:1099/jmxrmi"/>
    </bean>

    <context:mbean-export/>

    <context:component-scan base-package="ru.shabarov.blog.dao"/>
    <context:component-scan base-package="ru.shabarov.blog.service"/>
    <context:component-scan base-package="ru.shabarov.blog.beanlifecycle"/>
    <context:component-scan base-package="ru.shabarov.blog.event"/>
    <context:component-scan base-package="ru.shabarov.blog.config"/>
    <context:component-scan base-package="ru.shabarov.blog.rmi"/>


    <aop:aspectj-autoproxy />
</beans>